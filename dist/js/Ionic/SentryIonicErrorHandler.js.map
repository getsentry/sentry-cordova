{"version":3,"file":"SentryIonicErrorHandler.js","sourceRoot":"","sources":["../../../src/js/Ionic/SentryIonicErrorHandler.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,gBAAgB,EAAE,MAAM,cAAc,CAAC;AAEhD;;;GAGG;AACH,MAAM,2BAA2B,GAAG,CAAwC,iBAAoB,EAAK,EAAE;IACrG,MAAM,uBAAwB,SAAQ,iBAAiB;QACrD,WAAW,CAAC,KAAU;;YACpB,KAAK,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;YACzB,gBAAgB,OAAC,KAAK,CAAC,aAAa,mCAAI,KAAK,CAAC,CAAC;QACjD,CAAC;KACF;IAED,OAAO,uBAAuB,CAAC;AACjC,CAAC,CAAC;AAEF,OAAO,EAAE,2BAA2B,EAAE,CAAC","sourcesContent":["import { captureException } from '@sentry/core';\n\n/**\n * Wrap the ionic error handler with this method so Sentry catches unhandled errors on ionic.\n * See the documentation for more details.\n */\nconst withSentryIonicErrorHandler = <C extends new (...args: any[]) => any>(IonicErrorHandler: C): C => {\n  class SentryIonicErrorHandler extends IonicErrorHandler {\n    handleError(error: any) {\n      super.handleError(error);\n      captureException(error.originalError ?? error);\n    }\n  }\n\n  return SentryIonicErrorHandler;\n};\n\nexport { withSentryIonicErrorHandler };\n"]}