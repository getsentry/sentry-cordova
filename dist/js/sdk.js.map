{"version":3,"file":"sdk.js","sourceRoot":"","sources":["../../src/js/sdk.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,mBAAmB,EAAE,IAAI,IAAI,WAAW,EAAE,MAAM,iBAAiB,CAAC;AAC3E,OAAO,EAAE,GAAG,EAAE,QAAQ,EAAE,MAAM,cAAc,CAAC;AAC7C,OAAO,EAAE,eAAe,EAAE,MAAM,eAAe,CAAC;AAEhD,OAAO,EAAE,OAAO,EAAE,WAAW,EAAE,OAAO,EAAE,MAAM,gBAAgB,CAAC;AAE/D,OAAO,EAAE,YAAY,EAAE,MAAM,SAAS,CAAC;AACvC,OAAO,EAAE,oBAAoB,EAAE,MAAM,sBAAsB,CAAC;AAC5D,OAAO,EAAE,MAAM,EAAE,MAAM,WAAW,CAAC;AACnC,MAAM,eAAe,GAAmB;IACtC,YAAY,EAAE,IAAI;IAClB,yBAAyB,EAAE,IAAI;IAC/B,kBAAkB,EAAE,KAAK;IACzB,aAAa,EAAE,KAAK;CACrB,CAAC;AAEF;;GAEG;AACH,MAAM,UAAU,IAAI,CAAC,OAAgC;;IACnD,uFAAuF;IACvF,MAAM,MAAM,GAAG,eAAe,EAAwC,CAAC;IAEvE,MAAM,YAAY,+CAChB,yBAAyB,EAAE,IAAI,EAC/B,yBAAyB,EAAE,IAAI,IAC5B,eAAe,KAClB,OAAO,QAAE,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,cAAc,0CAAE,EAAE,KAChC,OAAO,CACX,CAAC;IAEF,IAAI,YAAY,CAAC,OAAO,KAAK,KAAK;QAChC,MAAM,CAAC,QAAQ,KAAK,SAAS,EAAE;QAC/B,YAAY,CAAC,YAAY,GAAG,KAAK,CAAC;QAClC,YAAY,CAAC,kBAAkB,GAAG,KAAK,CAAC;KACzC;SAAM;QACL,8CAA8C;QAC9C,IAAI,YAAY,CAAC,kBAAkB,KAAK,SAAS,EAAE;YACjD,YAAY,CAAC,kBAAkB,GAAG,IAAI,CAAC;SACxC;QACD,IAAI,YAAY,CAAC,YAAY,KAAK,SAAS,EAAE;YAC3C,YAAY,CAAC,YAAY,GAAG,IAAI,CAAC;SAClC;KACF;IAED,wDAAwD;IACxD,MAAM,UAAU,GAAG,IAAI,GAAG,CAAC,SAAS,EAAE,IAAI,YAAY,EAAE,CAAC,CAAC;IAC1D,QAAQ,CAAC,UAAU,CAAC,CAAC;IAErB,YAAY,CAAC,mBAAmB,GAAG;QACjC,GAAG,mBAAmB;QACtB,IAAI,OAAO,EAAE;QACb,IAAI,WAAW,EAAE;QACjB,IAAI,OAAO,EAAE;KACd,CAAC;IAEF,IAAI,CAAC,OAAO,CAAC,SAAS,IAAI,YAAY,CAAC,YAAY,EAAE;QACnD,YAAY,CAAC,SAAS,GAAG,OAAO,CAAC,SAAS,IAAI,oBAAoB,CAAC;KACpE;IAED,MAAM,cAAc,GAAG,gCAClB,YAAY,KACf,mBAAmB,EACjB,MAAM,CAAC,QAAQ,KAAK,SAAS,IAAI,YAAY,CAAC,yBAAyB,GACxD,CAAC;IAEpB,MAAM,aAAa,GAAG,gCACjB,YAAY,KACf,yBAAyB,EACvB,MAAM,CAAC,QAAQ,KAAK,SAAS,IAAI,YAAY,CAAC,yBAAyB,GACxD,CAAC;IAEpB,+EAA+E;IAC/E,6DAA6D;IAC7D,KAAK,MAAM,CAAC,gBAAgB,CAAC,aAAa,CAAC,CAAC;IAC5C,WAAW,CAAC,cAAc,CAAC,CAAC;AAC9B,CAAC;AAED;;;GAGG;AACH,MAAM,UAAU,WAAW;IACzB,IAAI,MAAM,CAAC,uBAAuB,EAAE,EAAE;QACpC,MAAM,CAAC,KAAK,EAAE,CAAC;KAChB;AACH,CAAC","sourcesContent":["import type { BrowserOptions } from '@sentry/browser';\nimport { defaultIntegrations, init as browserInit } from '@sentry/browser';\nimport { Hub, makeMain } from '@sentry/core';\nimport { getGlobalObject } from '@sentry/utils';\n\nimport { Cordova, EventOrigin, SdkInfo } from './integrations';\nimport type { CordovaOptions } from './options';\nimport { CordovaScope } from './scope';\nimport { makeCordovaTransport } from './transports/cordova';\nimport { NATIVE } from './wrapper';\nconst DEFAULT_OPTIONS: CordovaOptions = {\n  enableNative: true,\n  enableAutoSessionTracking: true,\n  enableNdkScopeSync: false,\n  attachThreads: false,\n};\n\n/**\n * Inits the SDK\n */\nexport function init(options: Partial<CordovaOptions>): void {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any, deprecation/deprecation\n  const window = getGlobalObject<{ SENTRY_RELEASE?: { id?: string } }>();\n\n  const finalOptions = {\n    enableAutoSessionTracking: true,\n    enableOutOfMemoryTracking: true,\n    ...DEFAULT_OPTIONS,\n    release: window?.SENTRY_RELEASE?.id,\n    ...options,\n  };\n\n  if (finalOptions.enabled === false ||\n    NATIVE.platform === 'browser') {\n    finalOptions.enableNative = false;\n    finalOptions.enableNativeNagger = false;\n  } else {\n    // keep the original value if user defined it.\n    if (finalOptions.enableNativeNagger === undefined) {\n      finalOptions.enableNativeNagger = true;\n    }\n    if (finalOptions.enableNative === undefined) {\n      finalOptions.enableNative = true;\n    }\n  }\n\n  // Initialize a new hub using our scope with native sync\n  const cordovaHub = new Hub(undefined, new CordovaScope());\n  makeMain(cordovaHub);\n\n  finalOptions.defaultIntegrations = [\n    ...defaultIntegrations,\n    new SdkInfo(),\n    new EventOrigin(),\n    new Cordova(),\n  ];\n\n  if (!options.transport && finalOptions.enableNative) {\n    finalOptions.transport = options.transport || makeCordovaTransport;\n  }\n\n  const browserOptions = {\n    ...finalOptions,\n    autoSessionTracking:\n      NATIVE.platform === 'browser' && finalOptions.enableAutoSessionTracking,\n  } as BrowserOptions;\n\n  const mobileOptions = {\n    ...finalOptions,\n    enableAutoSessionTracking:\n      NATIVE.platform !== 'browser' && finalOptions.enableAutoSessionTracking,\n  } as CordovaOptions;\n\n  // We first initialize the NATIVE SDK to avoid the Javascript SDK to invoke any\n  // feature from the NATIVE SDK without the options being set.\n  void NATIVE.startWithOptions(mobileOptions);\n  browserInit(browserOptions);\n}\n\n/**\n * If native client is available it will trigger a native crash.\n * Use this only for testing purposes.\n */\nexport function nativeCrash(): void {\n  if (NATIVE.isNativeClientAvailable()) {\n    NATIVE.crash();\n  }\n}\n"]}